/**
 * Transforms a licenses file generated by `license-checker` to content json
 *
 * First argument passed is the input path relative to CWD
 * Second argument passed is the output path relative to CWD
 *
 * This code was generated using OpenAI's ChatGPT and modified by TJ Couch. For more information about ChatGPT and its capabilities, visit [OpenAI's website](https://www.openai.com).
 * Prompt: "Write me a Node script to load json, transform it in some way, and save it to a new file" https://chat.openai.com/share/49cc18b1-21d5-4af5-9c61-c728e7e10c36
 */

import fs from 'fs';
import path from 'path';
import { ContentListScreenData } from '../src/components/screens/ContentListScreen';
import { SlideContentData } from '../src/components/contents/Slide';
import packageJson from '../package.json';

type LicenseInfo = {
  licenses: string;
  repository: string;
  publisher: string;
  email: string;
  description: string;
  copyright: string;
  licenseModified: string;
  licenseText: string;
  path: string;
  licenseFile: string;
};

type Licenses = {
  [moduleName: string]: LicenseInfo;
};

// Define the file paths
const inputFilePath = path.join(
  process.cwd(),
  process.argv[2] ?? 'licenses-raw.json',
);
const outputFilePath = path.join(
  process.cwd(),
  process.argv[3] ?? 'licenses.json',
);

// Load the JSON data from the input file
fs.readFile(inputFilePath, 'utf8', (err, licensesJson) => {
  if (err) {
    console.error(`Error reading ${inputFilePath}: ${err}`);
    return;
  }

  try {
    // Parse the JSON licenses
    const licenses: Licenses = JSON.parse(licensesJson);

    // Transform the licenses to content
    const licensesContent = transformLicenses(licenses);

    // Convert the license content back to a JSON string
    const licensesContentJson = JSON.stringify(licensesContent, null, 2);

    // Save the transformed data to the output file
    fs.writeFile(outputFilePath, licensesContentJson, 'utf8', err => {
      if (err) {
        console.error(`Error writing to ${outputFilePath}: ${err}`);
      } else {
        console.log(`Transformed license content saved to ${outputFilePath}`);
      }
    });
  } catch (parseError) {
    console.error(`Error parsing JSON data: ${parseError}`);
  }
});

/** Transforms license info from `license-checker` to content */
function transformLicenses(licenses: Licenses): ContentListScreenData {
  const appKey = `${packageJson.name}@${packageJson.version}`;

  // Set the app's license appropriately (it's showing up as UNLICENSED, so maybe `license-checker` doesn't support GPL or the main package's license or something)
  licenses[appKey].licenses = packageJson.license;

  const licensesScreen: ContentListScreenData = {
    id: '__licenses',
    title: 'Software License Info',
    type: 'ContentListScreen',
    design: 'tight',
    contents: Object.entries(licenses).map(([moduleName, licenseInfo]) => ({
      type: 'Slide',
      headerText: moduleName,
      contentDesign: 'tight',
      contents: [
        `${
          licenseInfo.description ? `${licenseInfo.description}\n----\n` : ''
        }${licenseInfo.copyright ? `${licenseInfo.copyright}\n` : ''}${
          licenseInfo.publisher ? `Publisher: ${licenseInfo.publisher}\n` : ''
        }${licenseInfo.email ? `${licenseInfo.email}\n` : ''}${
          licenseInfo.repository ? `${licenseInfo.repository}\n` : ''
        }${
          licenseInfo.licenses && licenseInfo.licenses !== 'UNLICENSED'
            ? `License: ${licenseInfo.licenses}${
                licenseInfo.licenseModified !== 'no' ? ' (Modified)' : ''
              }`
            : 'License: Unknown'
        }\n----\n${
          licenseInfo.licenseText ? `${licenseInfo.licenseText}` : ''
        }`,
      ],
    })),
  };

  // Move the app's license info to the top and make it primary
  const appContentIndex = licensesScreen.contents.findIndex(
    content => ((content as SlideContentData)?.headerText as string) === appKey,
  );

  if (appContentIndex < 0)
    throw new Error(`License info for ${appKey} not found!`);

  (licensesScreen.contents[appContentIndex] as SlideContentData).design =
    'primary';

  licensesScreen.contents.unshift(
    ...licensesScreen.contents.splice(appContentIndex, 1),
  );

  licensesScreen.contents.unshift({
    type: 'Header',
    headerText: 'Software License Info',
    lineTexts: [
      'Licenses for the many dependencies of this software. Thank you to all who made this possible!',
    ],
    design: 'screen',
  });
  return licensesScreen;
}
