/**
 * Transforms a licenses file generated by `license-checker` to content json
 *
 * First argument passed is the input path relative to CWD
 * Second argument passed is the output path relative to CWD
 *
 * Code started by ChatGPT and modified by TJ Couch
 */

import fs from 'fs';
import path from 'path';
import { ContentListScreenData } from '../src/components/screens/ContentListScreen';

type LicenseInfo = {
  licenses: string;
  repository: string;
  publisher: string;
  email: string;
  description: string;
  copyright: string;
  licenseModified: string;
  licenseText: string;
  path: string;
  licenseFile: string;
};

type Licenses = {
  [moduleName: string]: LicenseInfo;
};

// Define the file paths
const inputFilePath = path.join(
  process.cwd(),
  process.argv[2] ?? 'licenses-raw.json',
);
const outputFilePath = path.join(
  process.cwd(),
  process.argv[3] ?? 'licenses.json',
);

// Load the JSON data from the input file
fs.readFile(inputFilePath, 'utf8', (err, licensesJson) => {
  if (err) {
    console.error(`Error reading ${inputFilePath}: ${err}`);
    return;
  }

  try {
    // Parse the JSON licenses
    const licenses: Licenses = JSON.parse(licensesJson);

    // Transform the licenses to content
    const licensesContent = transformLicenses(licenses);

    // Convert the license content back to a JSON string
    const licensesContentJson = JSON.stringify(licensesContent, null, 2);

    // Save the transformed data to the output file
    fs.writeFile(outputFilePath, licensesContentJson, 'utf8', err => {
      if (err) {
        console.error(`Error writing to ${outputFilePath}: ${err}`);
      } else {
        console.log(`Transformed license content saved to ${outputFilePath}`);
      }
    });
  } catch (parseError) {
    console.error(`Error parsing JSON data: ${parseError}`);
  }
});

/** Transforms license info from `license-checker` to content */
function transformLicenses(licenses: Licenses): ContentListScreenData {
  // Example transformation: Convert all string values to uppercase
  const licensesScreen: ContentListScreenData = {
    id: '__licenses',
    title: 'Software License Info',
    type: 'ContentListScreen',
    design: 'tight',
    contents: Object.entries(licenses).map(([moduleName, licenseInfo]) => ({
      type: 'Slide',
      headerText: moduleName,
      design: 'tight',
      contents: [
        `${licenseInfo.description ? `${licenseInfo.description}\n----\n` : ''}${
          licenseInfo.copyright ? `${licenseInfo.copyright}\n` : ''
        }${
          licenseInfo.publisher ? `Publisher: ${licenseInfo.publisher}\n` : ''
        }${licenseInfo.email ? `${licenseInfo.email}\n` : ''}${
          licenseInfo.repository ? `${licenseInfo.repository}\n` : ''
        }${
          licenseInfo.licenses
            ? `License: ${licenseInfo.licenses}${
                licenseInfo.licenseModified !== 'no' ? '*' : ''
              }`
            : 'Unknown'
        }\n----\n${licenseInfo.licenseText ? `${licenseInfo.licenseText}` : ''}`,
      ],
    })),
  };
  licensesScreen.contents.unshift({
    type: 'Header',
    headerText: 'Software License Info',
    lineTexts: [
      'Licenses for the many dependencies of this software. Thank you to all who made this possible!',
    ],
    design: 'screen',
  });
  return licensesScreen;
}
